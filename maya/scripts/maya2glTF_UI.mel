source "maya2glTF_common.mel";
source "maya2glTF_animachine.mel";
source "maya2glTF_version.mel";

proc string _quoted(string $text)
{
    string $quote = "\"";
    return $quote+$text+$quote;
}

proc string _ensureTrailingSlash(string $folder)
{
    return $folder + (endsWith($folder,"/") ? "" : "/");
}

proc string _combinePaths(string $path1, string $path2) {
    return size($path1) == 0
     ? $path2
     : _ensureTrailingSlash($path1)+$path2;
}

proc string _ensureScriptNode() {
    string $node = "maya2glTF_scriptNode";

    if (!`objExists $node`) {
        scriptNode -st 2 -n $node;
    }

    return $node;
}

proc _deleteScriptNode() {
    string $node = "maya2glTF_scriptNode";

    if (`objExists $node`) {
        delete $node;
    }
}

proc _setInt(string $key, int $value) {
    string $node = _ensureScriptNode();
    if (!attributeExists($key, $node)) {
        addAttr -sn $key -ln $key -at "long" $node;
    }
    setAttr ($node+"."+$key) $value;
}

proc _setFlt(string $key, float $value) {
    string $node = _ensureScriptNode();
    if (!attributeExists($key, $node)) {
        addAttr -sn $key -ln $key -at "float" $node;
    }
    setAttr ($node+"."+$key) $value;
}

proc _setStr(string $key, string $value) {
    string $node = _ensureScriptNode();
    if (!attributeExists($key, $node)) {
        addAttr -sn $key -ln $key -dt "string" $node;
    }
    setAttr ($node+"."+$key) -type "string" $value;
}

proc int _getInt(string $key, int $defaultValue) {
    string $node = _ensureScriptNode();
    return attributeExists($key, $node) ? `getAttr ($node+"."+$key)` : $defaultValue;
}

proc float _getFlt(string $key, float $defaultValue) {
    string $node = _ensureScriptNode();
    return attributeExists($key, $node) ? `getAttr ($node+"."+$key)` : $defaultValue;
}

proc string _getStr(string $key, string $defaultValue) {
    string $node = _ensureScriptNode();
    return attributeExists($key, $node) ? `getAttr ($node+"."+$key)` : $defaultValue;
}

proc string _getTraxClips(string $char) {
    float $startTimes[];
    float $stopTimes[];
    string $clipNames[];
    int $clipCount = maya2glTF_getTraxClips($char, $startTimes, $stopTimes, $clipNames);

    string $fps = `currentTimeUnitToFPS`;
    string $flags = `format -s($fps) " -afr ^1s"`;

    int $i;
    for ($i=0; $i<$clipCount; ++$i) {
        $flags += `format -s(_quoted($clipNames[$i])) -s($startTimes[$i]) -s($stopTimes[$i])" -acn ^1s -ast ^2s -aet ^3s"`;
    }

    print ($flags+"\n");

    return $flags;
}

global proc maya2glTF_ignoreSelectedDeformers() 
{
    string $bsList[] = `ls -sl -type blendShape`;
    string $scList[] = `ls -sl -type skinCluster`;
    string $deformers[] = stringArrayCatenate($bsList, $scList);

    if (size($deformers) == 0)
        error "No blendShape or skinCluster was selected";

    string $attrName = "MGi";
    string $niceName = "Ignored by maya2glTF";

    for ($deformer in $deformers) {
        if (attributeExists($attrName, $deformer)) {
            print ("Deleting existing attribute on "+$deformer+"\n");
            deleteAttr -at $attrName -n $deformer;
        }

        print ("Adding attribute " + $attrName + " on " + $deformer + "\n");
        addAttr -at bool -nn $niceName -sn $attrName -dv on -ct "maya2glTF" $deformer;
    }
}

global proc maya2glTF_onExport
( string $copyrightFLD
, string $folderFLD
, string $sceneNameFLD
, string $scaleFLD
, string $flagsFLD
, string $animFLD
, string $clipFLD
, string $charFLD
, string $selOnlyFLD
, string $visOnlyFLD
, string $exportAllFLD
)
{
    // This is defined on maya startup
    global string $gMainProgressBar;  

    // Workaround a maya bug: progress is cancelled twice
    progressBar -edit
        -beginProgress
        -isInterruptable true
        -status "maya2glTF: preparing for export..."
        -minValue 0
        -maxValue 1
        $gMainProgressBar;

    while(`progressBar -query -isCancelled $gMainProgressBar`) 
    {
        print ("maya2glTF: aborting previous export...\n");
        progressBar -edit -endProgress $gMainProgressBar;
    }

    progressBar -edit -endProgress $gMainProgressBar;

    string $copyright = `textFieldGrp -q -fileName $copyrightFLD`; 
    string $folder = `textFieldGrp -q -fileName $folderFLD`;
    $folder = _ensureTrailingSlash($folder);
    string $sceneName = `textFieldGrp -q -text $sceneNameFLD`;
    float $scale = `floatFieldGrp -q -value1 $scaleFLD`;
    string $flags = `textFieldGrp -q -text $flagsFLD`;
    int $anim = `optionMenuGrp -q -sl $animFLD`;
    string $clip = `textFieldGrp -q -text $clipFLD`;
    string $char = `optionMenuGrp -q -v $charFLD`;
    int $selOnly = `checkBoxGrp -q -value1 $selOnlyFLD`;
    int $visOnly = `checkBoxGrp -q -value1 $visOnlyFLD`;
    int $exportAll = `checkBoxGrp -q -value1 $exportAllFLD`;

    // Persist values
    _setStr("outputFolder", $folder);
    _setStr("sceneName", $sceneName);
    _setStr("copyright", $copyright);
    _setFlt("scale", $scale);
    _setStr("flags", $flags);
    _setStr("char", $char);
    _setInt("anim", $anim);
    _setStr("clip", $clip);
    _setInt("selOnly", $selOnly);
    _setInt("visOnly", $visOnly);    
    _setInt("exportAll", $exportAll);

    switch ($anim) 
    {
        case 2:
        case 3:
        {
            string $ast = $anim == 2 ? `playbackOptions -q -min` : `playbackOptions -q -ast`;
            string $aet = $anim == 2 ? `playbackOptions -q -max` : `playbackOptions -q -aet`;
            string $fps = `currentTimeUnitToFPS`;
            $flags += `format -s(_quoted($clip)) -s($ast) -s($aet) -s($fps) " -acn ^1s -ast ^2s -aet ^3s -afr ^4s"`;
        }
        break;

        case 4:
            // Fetch clips from TRAX
            $flags += _getTraxClips($char);
            break;
    }

    if ($selOnly) {
        $flags += " -sno";
    }

    if ($visOnly) {
        $flags += " -vno";
    }

    if ($exportAll) {
        select -clear;
        select -r `listTransforms -geometry`; 
    }

    string $cmd = `format 
        -s(_quoted($sceneName)) 
        -s(_quoted($folder)) 
        -s($scale) 
        -s(_quoted($copyright)) 
        -s($flags)
        "maya2glTF -sn ^1s -of ^2s -sf ^3s -cpr ^4s ^5s"
    `;

    print ($cmd+"\n");

    print ("maya2glTF: loading plugin...\n");

    loadPlugin "maya2glTF";

    print ("maya2glTF: plugin loaded.\n");

    int $failed = catch(eval($cmd));

    unloadPlugin "maya2glTF";

    int $aborted = `progressBar -query -isCancelled $gMainProgressBar`;

    if (!$failed && !$aborted) {
        // Export animation metadata
        // TODO: Make this optional!
        if ($anim > 1)
        {
            string $outputName = $sceneName+".json";
            string $outputPath = _combinePaths($folder, $outputName);
            string $json = $anim == 4 
                ? maya2glTF_traxAnimMetaDataToJSON($sceneName, $char)
                : maya2glTF_sceneAnimMetaDataToJSON($sceneName, $anim == 2, false);

            int $fileId=`fopen $outputPath "w"`;
            fprint $fileId $json;
            fclose $fileId;   
        }
    }

    if ($aborted) {
        print ("*** maya2glTF: aborted at "+`date -time`+" ***\n");
    } else if ($failed) {
        print ("!!! maya2glTF: failed at "+`date -time`+" !!!\n");
    } else {
        print ("+++ maya2glTF: completed at "+`date -time`+" +++\n");
    }

    progressBar -edit -endProgress $gMainProgressBar;

    launch -directory $folder;
}

proc string _getDefaultOutputFolder() {
    string $scenePath = `file -q -loc`;
    string $sceneDir = dirname($scenePath);
    string $actualDir = size($sceneDir) == 0 ? `getenv "MAYA_APP_DIR"` : $sceneDir;
    return  _ensureTrailingSlash($actualDir)+"export/";
}

proc string _getDefaultSceneName() {
    string $sceneName = basenameEx(`file -q -sceneName -shortName`);
    return size($sceneName) == 0 ? "untitled" : $sceneName;
}

global proc maya2glTF_UI_preset(string $maya2glTF_preset) {
    // This is defined on maya startup
    global string $gMainProgressBar;  
    
    if (`window -exists maya2glTF_exporter_window`)
        deleteUI maya2glTF_exporter_window;

    string $year = `date -format "YYYY"`;
    string $chars[] = `ls -type character`;

    // Load previous or default values
    string $exportDir = fromNativePath(_getStr("outputFolder", _getDefaultOutputFolder()));
    string $sceneName = _getStr("sceneName", _getDefaultSceneName());
    string $copyright = _getStr("copyright", "(C)"+$year+" "+getenv("username"));
    float $scale = _getFlt("scale", 1);
    string $flags = _getStr("flags", "");
    string $char = _getStr("char", $chars[0]);
    int $anim = _getInt("anim", 1);
    string $clip = _getStr("clip", $sceneName);
    int $selOnly = _getInt("selOnly", 1);
    int $visOnly = _getInt("visOnly", 1);
    int $exportAll = _getInt("exportAll", 1);

    // Begin UI layout

    window -title ("maya2glTF") maya2glTF_exporter_window;

    string $header = "Copyright (C)" + $year + " wondermedia.tv         Version " + maya2glTF_version();

    string $frame = `frameLayout -mw 30 -mh 30 ($header)`;
    string $frameColumn = `columnLayout -adjustableColumn true -parent $frame -rowSpacing 10`;
    
    string $sceneNameFLD = `textFieldGrp -text $sceneName -label "Scene Name:" -parent $frameColumn`;    
    string $folderFLD = `textFieldGrp -fileName $exportDir -label "Output Folder:" -parent $frameColumn`;
    string $copyrightFLD = `textFieldGrp -text $copyright -label "Copyright:" -parent $frameColumn`;
    string $exportAllFLD = `checkBoxGrp -value1 $exportAll -label "Export all:" -parent $frameColumn`;
    string $exportFLD = `button -label "Export Meshes Placeholder" -parent $frameColumn`;    

    string $pbrShaderFrame = `frameLayout -collapsable true -label "PBR Shader" -parent $frameColumn`;
    string $pbrColumn = `columnLayout -adjustableColumn true -parent $pbrShaderFrame -rowSpacing 10`;
    
    separator -style "none" -parent $pbrColumn;

    button -label "assign PBR shader to selection" -command "maya2glTF_assignPbrShader();" -parent $pbrColumn;    

    string $animationFrame = `frameLayout -collapsable true -label "Animations" -parent $frameColumn`;
    string $animationColumn = `columnLayout -adjustableColumn true -parent $animationFrame -rowSpacing 10`;
        
    separator -style "none" -parent $animationColumn;

    string $animFLD = `optionMenuGrp -label "animation:" -parent $animationColumn`;
        menuItem -label "none";
        menuItem -label "time slider";
        menuItem -label "range slider";

    if (size($chars) > 0)
        menuItem -label "trax" -parent $animationColumn;	

    string $clipFLD = `textFieldGrp -label "clip name:" -text $clip -enable 0 -parent $animationColumn`;

    string $charFLD = `optionMenuGrp -label "character:" -enable 0 -parent $animationColumn`;
    
    for ($c in $chars)
        menuItem -label $c;

    if (size($chars) == 0)
        menuItem -label "";

    string $animCMD = `format 
        -s(_quoted($animFLD)) 
        -s(_quoted($charFLD)) 
        -s(_quoted($clipFLD))
        ( 
            "optionMenuGrp -edit -enable (`optionMenuGrp -q -sl ^1s` == 4) ^2s;" +
            "textFieldGrp -edit -enable (`optionMenuGrp -q -sl ^1s` == 2 || `optionMenuGrp -q -sl ^1s` == 3) ^3s;"
        )`;

    optionMenuGrp -edit -changeCommand $animCMD $animFLD;

    catch(`optionMenuGrp -edit -value $char $charFLD`);
    catch(`optionMenuGrp -edit -select $anim $animFLD`);
    catch(`eval $animCMD`);

    optionMenuGrp -edit -select 2 $animFLD;
    eval $animCMD;

    string $presetOptionsFrame = `frameLayout -collapsable true -label "Preset Options" -parent $frameColumn`;
    string $presetOptionsColumn = `columnLayout -parent $presetOptionsFrame -rowSpacing 10`;

    separator -style "none" -parent $presetOptionsColumn;
    
    string $scaleFLD = `floatFieldGrp -precision 6 -value1 $scale -label "scale factor:" -parent $presetOptionsColumn`;
    string $selOnlyFLD = `checkBoxGrp -value1 $selOnly -label "selected only?" -annotation "Export just the selected nodes, or also include the hierarchy underneath them?" -parent $presetOptionsColumn`;
    string $visOnlyFLD = `checkBoxGrp -value1 $visOnly -label "visible only?" -parent $presetOptionsColumn`;
    string $flagsFLD = `textFieldGrp -text $flags -label "extra flags:" -parent $presetOptionsColumn`;

    string $advancedOptionsFrame = `frameLayout -collapse true -collapsable true -label "Advanced Options (Use with care!)" -parent $frameColumn`;
    string $advancedOptionsColumn = `columnLayout -adjustableColumn true -parent $advancedOptionsFrame -rowSpacing 10`;
    
    separator -style "none" -parent $advancedOptionsColumn;
    
    button -label "ignore selected mesh deformers" -command "maya2glTF_ignoreSelectedDeformers();" -parent $advancedOptionsColumn;

    button -label "select all polygon meshes" -command "maya2glTF_polySelectAndFrame();" -bgc (60/255.0) (80/255.0) (120/255.0) -parent $advancedOptionsColumn;

    button -label "reset to default values" -command "evalDeferred(\"maya2glTF_resetUI();\");" -parent $advancedOptionsColumn;   

    // End of UI layout

    if ($maya2glTF_preset == "Godot Engine") {
        floatFieldGrp -edit -value1 0.01 $scaleFLD;
        textFieldGrp -edit -text "-isc -bsf" $flagsFLD;
    }

    string $exportCMD = `format 
        -s(_quoted($copyrightFLD)) 
        -s(_quoted($folderFLD)) 
        -s(_quoted($sceneNameFLD)) 
        -s(_quoted($scaleFLD))
        -s(_quoted($flagsFLD))
        -s(_quoted($animFLD))
        -s(_quoted($clipFLD))
        -s(_quoted($charFLD))
        -s(_quoted($selOnlyFLD))
        -s(_quoted($visOnlyFLD))
         "maya2glTF_onExport(^1s, ^2s, ^3s, ^4s, ^5s, ^6s, ^7s, ^8s, ^9s, ^10s"`;

    $exportCMD = $exportCMD + `format
        -s(_quoted($exportAllFLD))
        ", ^1s);"`;

    button -edit -label "Export Meshes" -command $exportCMD -bgc  (50/255.0) (120/255.0) (70/255.0) $exportFLD;

    showWindow maya2glTF_exporter_window;
}

global proc maya2glTF_UI() {
    maya2glTF_UI_preset("Default");
}

global proc maya2glTF_resetUI() {
    _deleteScriptNode();
    maya2glTF_UI();
}